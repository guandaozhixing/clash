# ========================
# Clash-ALL 优化配置
# ========================

# 机场节点订阅

proxy-providers:
  AirPort1:
    url: "http://104.238.128.85:3008/T3B9dgzBzdRbBF8Aqx7P/download/collection/fallback"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连

proxies:
  - {name: 直连, type: direct}
  - {name: 拒绝, type: reject}

# ========================
# 主要端口设置
# ========================
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7895

allow-lan: true
mode: rule
log-level: info

# external-controller: 0.0.0.0:9090
# external-ui: ui
# external-ui-name: zashboard
# external-ui-url: https://gh-proxy.com/github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip
# secret: "123456"

# ========================
# DNS 设置
# ========================
dns:
  enable: true
  listen: 0.0.0.0:7874
  ipv6: true
  always-real-ip:
    - "*.heiyu.space"
    - "*.lazycat.cloud"
  enhanced-mode: fake-ip
  fake-ip-range: 198.20.0.1/16
  nameserver:
    - 223.5.5.5
  fake-ip-filter:
    - +.lan
    - +.local
    - geosite:cn
    - +.zzhub.org
    # 快猫
    - +.quickcht3.club
    - +.kuaimao2.club
    # 火烧
    - +.onesubv.site
    - +.oneyyds.online
    - +.fengyyds.site
    - +.onemg.top
    # 猫耳
    - +.zhunchuanpb.com
    - +.sevenka.top
    # BestVPN
    - +.networklinkpro.net
    - +.prosubnet02.eu
    # 小牛
    - +.4yfu73r3a4kl.com
    - +.xiaoniuyun.cc
    # 硅谷
    - +.huawei-cloud.shop
    - +.huawei-cloud.vip
    - +.gpt-agent.cc
    # 无界
    - +.acwct.cn
    - +.472361.xyz
    # 冰云
    - +.bingyun.ink
    - +.fafhjkah.xyz
    # 牛逼
    - +.66jc.top
    - +.jueduibupao.top
    - +.qeayr.cn
    - +.saojc.xyz
    - +.sssyun.xyz
    - +.dler.cloud
    - +.0tk8a3a1q4t94dler.com
    - +.aerianas.top

ipv6: true

# ========================
# TUN 模块
# ========================
tun:
  enable: true
  stack: gvisor
  device: utun
  endpoint-independent-nat: true
  auto-route: false
  auto-detect-interface: false
  auto-redirect: false
  strict-route: false

profile:
  store-selected: true
  store-fake-ip: true

# ========================
# 策略组定义
# ========================
default: &default
  type: select
  proxies:
    - 搬瓦工-故转
    - VU-故转
    - 🇺🇲 美国落地
    - 美国-故转
    - 所有-手动
    - 所有-自动
    - 直连
    - 拒绝

proxy-groups:
  # 业务分流组
  - {name: 🚀 默认代理, <<: *default}
  - {name: AI, type: select, proxies: [🇺🇲 美国落地, 🚀 默认代理]}
  - {name: GitHub, type: select, proxies: [🇺🇲 美国落地, 🚀 默认代理]}
  - {name: Twitter(X), type: select, proxies: [🇺🇲 美国落地, 🚀 默认代理]}
  - {name: YouTube, type: select, proxies: [搬瓦工-故转, 🚀 默认代理]}
  - {name: Apple, type: select, proxies: [直连, 🚀 默认代理]}
  - {name: Microsoft, type: select, proxies: [直连, 🚀 默认代理]}
  - {name: Google, type: select, proxies: [🇺🇲 美国落地, 🚀 默认代理]}
  - {name: Block, <<: *default}
  - {name: 国外, <<: *default}
  - {name: 国内, type: select, proxies: [直连, 🚀 默认代理]}
  - {name: 🐟 漏网之鱼, <<: *default}

  - name: 所有-手动
    type: select
    include-all: true
    filter: "^((?!(直连|拒绝)).)*$"

  - name: 所有-自动
    type: url-test
    include-all: true
    tolerance: 50
    interval: 300
    filter: "^((?!(直连|拒绝)).)*$"

  # 落地组
  - name: 🇺🇲 美国落地
    type: select
    include-all: true
    filter: "(?=.*(ZJ|自建)).*$"

  # Vultr组
  - name: VU-故转
    type: fallback
    interval: 300
    lazy: false
    proxies:
      - VU-手动
      - VU-自动
  - name: VU-手动
    type: select
    include-all: true
    filter: "(?=.*(Vult)).*$"
  - name: VU-自动
    type: url-test
    include-all: true
    tolerance: 50
    interval: 300
    filter: "(?=.*(Vult)).*$"


  # 搬瓦工组
  - name: 搬瓦工-故转
    type: fallback
    interval: 300
    lazy: false
    proxies:
      - 搬瓦工-手动
      - 搬瓦工-自动
  - name: 搬瓦工-手动
    type: select
    include-all: true
    filter: "(?=.*(BanWaGong|搬瓦工)).*$"
  - name: 搬瓦工-自动
    type: url-test
    include-all: true
    tolerance: 50
    interval: 300
    filter: "(?=.*(BanWaGong|搬瓦工)).*$"

  # 香港组
  - name: 香港-故转
    type: fallback
    interval: 300
    lazy: false
    proxies:
      - 香港-手动
      - 香港-自动
  - name: 香港-手动
    type: select
    include-all: true
    filter: "(?=.*(广港|香港|HK|Hong Kong|🇭🇰|HongKong))^((?!(落地|自建)).)*$"
  - name: 香港-自动
    type: url-test
    include-all: true
    tolerance: 50
    interval: 300
    filter: "(?=.*(广港|香港|HK|Hong Kong|🇭🇰|HongKong))^((?!(落地|自建)).)*$"

  # 台湾组
  - name: 台湾-故转
    type: fallback
    interval: 300
    lazy: false
    proxies:
      - 台湾-手动
      - 台湾-自动
  - name: 台湾-手动
    type: select
    include-all: true
    filter: "(?=.*(广台|台湾|台灣|TW|Tai Wan|🇹🇼|TaiWan|Taiwan))^((?!(落地|自建)).)*$"
  - name: 台湾-自动
    type: url-test
    include-all: true
    tolerance: 50
    interval: 300
    filter: "(?=.*(广台|台湾|台灣|TW|Tai Wan|🇹🇼|TaiWan|Taiwan))^((?!(落地|自建)).)*$"

  # 日本组
  - name: 日本-故转
    type: fallback
    interval: 300
    lazy: false
    proxies:
      - 日本-手动
      - 日本-自动
  - name: 日本-手动
    type: select
    include-all: true
    filter: "(?=.*(广日|日本|JP|川日|东京|大阪|泉日|埼玉|沪日|深日|🇯🇵|Japan))^((?!(落地|自建)).)*$"
  - name: 日本-自动
    type: url-test
    include-all: true
    tolerance: 50
    interval: 300
    filter: "(?=.*(广日|日本|JP|川日|东京|大阪|泉日|埼玉|沪日|深日|🇯🇵|Japan))^((?!(落地|自建)).)*$"

  # 新加坡组
  - name: 新加坡-故转
    type: fallback
    interval: 300
    lazy: false
    proxies:
      - 新加坡-手动
      - 新加坡-自动
  - name: 新加坡-手动
    type: select
    include-all: true
    filter: "(?=.*(广新|新加坡|SG|坡|狮城|🇸🇬|Singapore))^((?!(落地|自建)).)*$"
  - name: 新加坡-自动
    type: url-test
    include-all: true
    tolerance: 50
    interval: 300
    filter: "(?=.*(广新|新加坡|SG|坡|狮城|🇸🇬|Singapore))^((?!(落地|自建)).)*$"

  # 韩国组
  - name: 韩国-故转
    type: fallback
    interval: 300
    lazy: false
    proxies:
      - 韩国-手动
      - 韩国-自动
  - name: 韩国-手动
    type: select
    include-all: true
    filter: "(?=.*(广韩|韩国|韓國|KR|首尔|春川|🇰🇷|Korea))^((?!(落地|自建)).)*$"
  - name: 韩国-自动
    type: url-test
    include-all: true
    tolerance: 50
    interval: 300
    filter: "(?=.*(广韩|韩国|韓國|KR|首尔|春川|🇰🇷|Korea))^((?!(落地|自建)).)*$"

  # 美国组
  - name: 美国-故转
    type: fallback
    interval: 300
    lazy: false
    proxies:
      - 美国-手动
      - 美国-自动
  - name: 美国-手动
    type: select
    include-all: true
    filter: "(?=.*(广美|美|US|纽约|波特兰|达拉斯|俄勒|凤凰城|费利蒙|拉斯|洛杉|圣何塞|圣克拉|西雅|芝加|🇺🇸|United States)).*$"
  - name: 美国-自动
    type: url-test
    include-all: true
    tolerance: 50
    interval: 300
    filter: "(?=.*(广美|美|US|纽约|波特兰|达拉斯|俄勒|凤凰城|费利蒙|拉斯|洛杉|圣何塞|圣克拉|西雅|芝加|🇺🇸|United States)).*$"

  # 英国组
  # - name: 英国-故转
  #   type: fallback
  #   interval: 300
  #   lazy: false
  #   proxies:
  #     - 英国-手动
  #     - 英国-自动
  # - name: 英国-手动
  #   type: select
  #   include-all: true
  #   filter: "(?=.*(英国|英|伦敦|UK|United Kingdom|🇬🇧|London)).*$"
  # - name: 英国-自动
  #   type: url-test
  #   include-all: true
  #   tolerance: 50
  #   interval: 300
  #   filter: "(?=.*(英国|英|伦敦|UK|United Kingdom|🇬🇧|London)).*$"

  # 其他组
  # - name: 其他-故转
  #   type: fallback
  #   interval: 300
  #   lazy: false
  #   proxies:
  #     - 其他-手动
  #     - 其他-自动
  # - name: 其他-手动
  #   type: select
  #   include-all: true
  #   filter: "^((?!(直连|拒绝|广港|香港|HK|Hong Kong|🇭🇰|HongKong|广台|台湾|台灣|TW|Tai Wan|🇹🇼|🇨🇳|TaiWan|Taiwan|广日|日本|JP|川日|东京|大阪|泉日|埼玉|沪日|深日|🇯🇵|Japan|广新|新加坡|SG|坡|狮城|🇸🇬|Singapore|广韩|韩国|韓國|KR|首尔|春川|🇰🇷|Korea|广美|美|US|纽约|波特兰|达拉斯|俄勒|凤凰城|费利蒙|拉斯|洛杉|圣何塞|圣克拉|西雅|芝加|🇺🇸|United States|英国|UK|United Kingdom|伦敦|英|London|🇬🇧)).)*$"
  # - name: 其他-自动
  #   type: url-test
  #   include-all: true
  #   tolerance: 50
  #   interval: 300
  #   filter: "^((?!(直连|拒绝|广港|香港|HK|Hong Kong|🇭🇰|HongKong|广台|台湾|台灣|TW|Tai Wan|🇹🇼|🇨🇳|TaiWan|Taiwan|广日|日本|JP|川日|东京|大阪|泉日|埼玉|沪日|深日|🇯🇵|Japan|广新|新加坡|SG|坡|狮城|🇸🇬|Singapore|广韩|韩国|韓國|KR|首尔|春川|🇰🇷|Korea|广美|美|US|纽约|波特兰|达拉斯|俄勒|凤凰城|费利蒙|拉斯|洛杉|圣何塞|圣克拉|西雅|芝加|🇺🇸|United States|英国|UK|United Kingdom|伦敦|英|London|🇬🇧)).)*$"

# ========================
# 规则引擎（rules）
# ========================
rules:
  - DOMAIN-SUFFIX,heiyu.space,直连
  - DOMAIN-SUFFIX,lazycat.cloud,直连
  - RULE-SET,Block_Domain,Block
  - RULE-SET,ChatGPT_Domain,AI
  - RULE-SET,Claude_Domain,AI
  - RULE-SET,Meta AI_Domain,AI
  - RULE-SET,Perplexity_Domain,AI
  - RULE-SET,GitHub_Domain,GitHub
  - RULE-SET,Twitter_Domain,Twitter(X)
  - RULE-SET,Apple_Domain,Apple
  - RULE-SET,Apple-CN_Domain,Apple
  - RULE-SET,Microsoft_Domain,Microsoft
  - RULE-SET,Youtube_Domain,YouTube
  - RULE-SET,Google_Domain,Google
  - RULE-SET,Google_IP,Google,no-resolve
  - RULE-SET,Proxy_Domain,国外
  - RULE-SET,Globe_Domain,国外
  - RULE-SET,Direct_Domain,国内
  - RULE-SET,China_Domain,国内
  - RULE-SET,China_IP,国内,no-resolve
  - RULE-SET,Private_Domain,国内
  - MATCH,🐟 漏网之鱼

# ========================
# 规则集提供者
# ========================
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}

rule-providers:
  ChatGPT_Domain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/openai.mrs"}
  Claude_Domain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Claude/Claude.list"}
  Meta AI_Domain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/liandu2024/clash/refs/heads/main/list/MetaAi.list"}
  Perplexity_Domain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/perplexity.mrs"}
  Copilot_Domain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/liandu2024/clash/refs/heads/main/list/Copilot.list"}
  Gemini_Domain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/liandu2024/clash/refs/heads/main/list/Gemini.list"}
  GitHub_Domain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/github.mrs"}
  Telegram_Domain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/telegram.mrs"}
  Telegram_IP: {<<: *ip, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geoip/telegram.mrs"}
  Twitter_Domain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/x.mrs"}
  WhatsApp_Domain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Whatsapp/Whatsapp.list"}
  Facebook_Domain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/facebook.mrs"}
  Apple-CN_Domain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/apple-cn.mrs"}
  Apple_Domain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/apple.mrs"}
  Microsoft_Domain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/microsoft.mrs"}
  Proxy_Domain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/liandu2024/clash/refs/heads/main/list/Proxy.list"}
  Globe_Domain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/Global/Global.list"}
  Direct_Domain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/liandu2024/clash/refs/heads/main/list/Direct.list"}
  China_Domain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/cn.mrs"}
  China_IP: {<<: *ip, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geoip/cn.mrs"}
  Private_Domain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/private.mrs"}
  Block_Domain: {<<: *class, url: "https://gh-proxy.com/raw.githubusercontent.com/liandu2024/clash/refs/heads/main/list/Block.list"}
  Youtube_Domain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/youtube.mrs"}
  Google_Domain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/google.mrs"}
  Google_IP: {<<: *ip, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geoip/google.mrs"}
# GateFireWall_Domain: {<<: *domain, url: "https://gh-proxy.com/github.com/metacubex/meta-rules-dat/raw/refs/heads/meta/geo/geosite/gfw.mrs"}
